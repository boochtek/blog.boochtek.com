<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Estimation &#8211; BoochTek, LLC</title>
	<atom:link href="http://blog.boochtek.com/category/agile/estimation-agile/feed" rel="self" type="application/rss+xml" />
	<link>http://blog.boochtek.com</link>
	<description>Web Development, Ruby on Rails, Open Source</description>
	<lastBuildDate>Thu, 07 Jul 2016 04:22:08 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.5.3</generator>
	<item>
		<title>The Problem With Estimates</title>
		<link>http://blog.boochtek.com/2015/09/28/no-estimates</link>
		<comments>http://blog.boochtek.com/2015/09/28/no-estimates#comments</comments>
		<pubDate>Tue, 29 Sep 2015 03:39:41 +0000</pubDate>
		<dc:creator><![CDATA[Craig Buchek]]></dc:creator>
				<category><![CDATA[Agile]]></category>
		<category><![CDATA[Estimation]]></category>

		<guid isPermaLink="false">http://blog.boochtek.com/?p=261</guid>
		<description><![CDATA[I&#8217;m a big proponent of Agile (mostly XP; I&#8217;m mostly anti-Scrum) and I&#8217;ve contributed some to the #noestimates &#8220;movement&#8221;. I don&#8217;t really mean that nobody should ever estimate anything. I mean that I&#8217;ve never seen useful (fine-grained) estimates anywhere. Here are some of the problems with estimates that I&#8217;ve seen frequently: We&#8217;re not good at &#8230; <a href="http://blog.boochtek.com/2015/09/28/no-estimates" class="more-link">Continue reading<span class="screen-reader-text"> "The Problem With Estimates"</span></a>]]></description>
				<content:encoded><![CDATA[<div id="fhbody-76784315">
<div id="text-76784315">
<p>I&#8217;m a big proponent of Agile (mostly XP; I&#8217;m mostly anti-Scrum) and I&#8217;ve contributed some to the #noestimates &#8220;movement&#8221;.</p>
<p>I don&#8217;t really mean that nobody should ever estimate anything. I mean that I&#8217;ve never seen useful (fine-grained) estimates anywhere. Here are some of the problems with estimates that I&#8217;ve seen frequently:</p>
<ol>
<li>We&#8217;re not good at estimating how long things will take. We&#8217;re usually optimistic about how quickly we can get things done, and almost always miss thinking about things that will take more time. I&#8217;ve never seen a case where a project is completed more quickly than estimated. I&#8217;ve only rarely seen fine-grained (story-level) tasks completed more quickly than estimated.</li>
<li>Management asks for estimates and then treats them as deadlines. The team then learns to inflate their estimates. Then management learns to reduce the estimates they&#8217;re given. Given fudge factors in each direction, the estimate no longer has much reliability. Even if you&#8217;re using story points, the point inflation/deflation leads to less consistency and therefore reduced reliability.</li>
<li>Estimates that are given are negotiated down, or simply reduced. This leads to the question why you&#8217;d ask for an estimate and not take the answer provided. If you&#8217;re not going to listen to the answer, why are you asking the question? This is probably the craziest one on the list — given my first point, increasing an estimate would make sense. Reducing the estimates is just magical wishful thinking.</li>
<li>Plans change and work is added, but the deadline (presumably based on the estimates) is not changed to correspond with the extra work involved. So again, you&#8217;re not actually even using the estimates that were given.</li>
<li>Management dictates deadlines arbitrarily, without speaking to the people who will be doing the work. Spending time estimating how long each task will take when the deadline is already set is completely pointless.</li>
<li>Almost every deadline is complete bullshit, based on nothing. Often the excuse is that marketing needs to know when something will come out, so that they can let people know about it. Why they need to know the exact release date way in advance, I&#8217;ve never been able to figure out. Many people intuitively know that the deadlines are bullshit, and will likely be allowed to slip. The only exception to bullshit deadlines I&#8217;ve come across are regulatory deadlines. (I know there are a few other exceptions out there.)</li>
<li>Estimation at a fine-grained level isn&#8217;t necessary. Many Agile teams estimate using story points, and determine a conversion from story points to time based on previous empirical data. This is fine, except that the time spent estimating the story is wasted time — counting the number of stories almost always gives the same predictive power. Teams tend to get better at breaking up stories over time, so that they&#8217;re more consistent in size, so this becomes more likely over time.</li>
<li>The ultimate purpose of an estimate is to evaluate whether the proposed work will be profitable, and therefore worth doing. Or to compare the ROI (return on investment) between alternative projects. But to know that, you&#8217;ll have to know what value that work will provide. I don&#8217;t believe I&#8217;ve ever seen that done — at least not at a fine-grained level. Usually by the time you&#8217;re asked to estimate, the project has already gotten approval to proceed.</li>
</ol>
<p>I&#8217;ll note that most of these pit management against the team, instead of working together toward a common cause. Most of the practices also lead to seriously demoralizing the team. And most of the time, the estimates aren&#8217;t really even taken into account very much.</p>
<p>My advice is to first understand the value of a project before you consider estimating the costs. The estimation at this point will be very rough, so make sure that you have a very wide margin between the expected value and the rough estimate of the cost. If you&#8217;re pretty certain of the expected value, I&#8217;d probably want to make sure I could still be profitable even if it took 3 or 4 times as long to complete as the rough estimate. And if there&#8217;s uncertainty in the expected value, much more.</p>
<p>Another way to mitigate the risk of throwing money at something that&#8217;s not going to have positive ROI is to reduce the feedback loop. Order the work so that the tasks are ranked in order of value to the customer. (Realistically, you&#8217;ll have dependencies of tasks to worry about, and should consider effort involved too.) So work on the most valuable feature first — get that out into production as soon as possible. Once that&#8217;s done, you can assess if your ROI is positive or not. Keep iterating in this fashion, working on the features that will provide the most value first. Keep assessing your ROI, and stop when the ROI is no longer worth it, compared to other projects the team could be working on.</p>
<p>At a fine-grained level, if you&#8217;re using story points, I&#8217;d ask you to do the math to see if just counting the stories would be as effective at predicting how much will be done over time as using the story points. If so, you can save the time the team spends on estimating stories. I&#8217;d still recommend spending time talking about stories so that everyone has a shared understanding of what needs to be done, and to break stories up into a smaller, more manageable size — with one acceptance criteria per story. Also take a look to see if empirical average cycle time (how long it takes a single story to move from start to finish) might provide you the predictive power just as well as estimates. (I.e. is it bandwidth or latency that really provides the predictive power you&#8217;re looking for?)</p>
<p>And don&#8217;t forget Hofstadter&#8217;s Law: It always takes longer than you expect, even when you take into account Hofstadter&#8217;s Law.</p>
</div>
</div>
<footer>
<div></div>
</footer>
]]></content:encoded>
			<wfw:commentRss>http://blog.boochtek.com/2015/09/28/no-estimates/feed</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Estimation Isn&#8217;t Agile</title>
		<link>http://blog.boochtek.com/2014/03/23/agile-estimation</link>
		<comments>http://blog.boochtek.com/2014/03/23/agile-estimation#comments</comments>
		<pubDate>Mon, 24 Mar 2014 04:02:28 +0000</pubDate>
		<dc:creator><![CDATA[Craig Buchek]]></dc:creator>
				<category><![CDATA[Agile]]></category>
		<category><![CDATA[Estimation]]></category>
		<category><![CDATA[estimation]]></category>
		<category><![CDATA[no estimates]]></category>

		<guid isPermaLink="false">http://blog.boochtek.com/?p=161</guid>
		<description><![CDATA[I don&#8217;t believe that estimation should be part of any Agile practice. One of our managers recently mentioned that we hadn&#8217;t met the &#8220;contract&#8221; that we had &#8220;committed&#8221; to in our last iteration. This was complete nonsense, because A) we hadn&#8217;t made any such commitments, and B) we completed many more story points than the &#8230; <a href="http://blog.boochtek.com/2014/03/23/agile-estimation" class="more-link">Continue reading<span class="screen-reader-text"> "Estimation Isn&#8217;t Agile"</span></a>]]></description>
				<content:encoded><![CDATA[<p>I don&#8217;t believe that estimation should be part of any Agile practice.</p>
<p>One of our managers recently mentioned that we hadn&#8217;t met the &#8220;contract&#8221; that we had &#8220;committed&#8221; to in our last iteration. This was complete nonsense, because A) we hadn&#8217;t made any such commitments, and B) we completed many more story points than the previous iterations (and without inflating story points).</p>
<p><a href="http://blog.boochtek.com/wp-content/uploads/2014/03/estimates-as-deadlines.png"><img class="alignnone size-full wp-image-162" alt="estimates-as-deadlines" src="http://blog.boochtek.com/wp-content/uploads/2014/03/estimates-as-deadlines.png" width="500" height="361" /></a></p>
<p>But her language made me come to several realizations. First and foremost, estimates are contracts. Sure, they&#8217;re not <strong>supposed</strong> to be treated as commitments, but they almost always are. And what does the <a href="http://agilemanifesto.org/">Agile Manifesto</a> say about this? It says that we should value customer collaboration over contract negotiation, and responding to change over following a plan. So it&#8217;s pretty clear that treating estimates as commitments is completely counter to the Agile values.</p>
<p>Why does this matter? What benefits do the Agile values bring us? I think the biggest benefit they bring is changing the way that we work, so that we can better deliver value to our customers. Without Agile, we&#8217;d just keep working the way we&#8217;ve always done things. And that didn&#8217;t seem to be working out so well. If we follow the Agile values and principles, at least we&#8217;ll have a fighting chance of improving our ability to deliver value.</p>
<p>Ask yourself — have you ever seen a software development project that was on time and on budget? Where the estimates were spot-on? Of course not. For one, we&#8217;re terrible at estimating. For another, our plans change — either from external factors, or from what we learn as we go.</p>
<h1>Improved Estimation</h1>
<p>To me, Agile is also about facing reality — and embracing it. It realizes that we&#8217;re terrible at estimating. It realizes that plans change. Most Agile methodologies have some tricks to counteract <b><a href="http://en.wikipedia.org/wiki/Hofstadter's_law">Hofstadter&#8217;s law</a></b>. Generally, we use relative story points instead of hours, and then use an empirical factor to convert points to hours.</p>
<p>When this works, it is better than any other estimation I&#8217;ve ever seen. But it doesn&#8217;t work very often. People have trouble with relative estimation. How do you set the basis for what a point means without relating it to actual hours? Affinity estimation could work, but then you have to remember what the basis was. We&#8217;ve got a large distributed team, and when we tried this, we couldn&#8217;t all remember what the basis was.</p>
<p>Since we couldn&#8217;t get affinity estimation to work, we tried changing to perfect hours (only powers of 2). But then people thought of them as time. When we took longer than the estimate on an individual story, managers and team members thought we were taking longer than we should have. So our estimates ended up causing problems.</p>
<h1>What Can We Do Instead?</h1>
<p>Managers want estimates so that they can have predictability. They want to know when new features will be available. Is there a better way to get what we need?</p>
<p>I believe there&#8217;s a better way — prioritization. If you work on the most important thing first, then the most important thing will get done first. We should <strong>always</strong> be working on the next most important thing.</p>
<p>What if there&#8217;s more than 1 thing that&#8217;s most important? Then you&#8217;ve failed. You&#8217;ve failed at logic if you can&#8217;t understand that only 1 thing can be most important. You&#8217;ve failed at prioritizing the customers&#8217; needs. You&#8217;ve failed at project management.</p>
<h1>Arguments</h1>
<p>1. Why can&#8217;t you just tell us how long it will really take?</p>
<p>Because we don&#8217;t know. Because we <strong>can&#8217;t</strong> know. This is the first time we&#8217;ve ever implemented the functionality you&#8217;ve asked for. If we&#8217;d done it before, we&#8217;d just use that existing code. As Glenn Vanderburg pointed out in his excellent talk on <a href="http://www.infoq.com/presentations/Software-Engineering">Software Engineering</a>, we&#8217;re not building software, we&#8217;re architecting it.</p>
<p>2. But we have to tell our customers what to expect.</p>
<p>Why? Is the product so bad that you can&#8217;t keep customers around without leading them on with future enhancements? And why do customers need exact dates? A general roadmap telling them what the priorities for upcoming features should be sufficient.</p>
<p>3. But we have to have messaging about new features.</p>
<p>OK. Then send out that messaging once the feature has made it to Staging. Or even after it&#8217;s been rolled out to Production.</p>
<p>4. But we&#8217;ve promised these new features to the customers by this date.</p>
<p>Ah, so you&#8217;ve made promises to the customer that you don&#8217;t have control over. Have you ever heard of &#8220;under-promise and over-deliver&#8221;? That&#8217;s how you create happy customers. Yet you&#8217;ve done just the opposite, haven&#8217;t you? And then you want to blame someone else.</p>
<p><span style="color: #000000; font-weight: bold;">Risk</span></p>
<p>Estimates are risk. But the risk doesn&#8217;t come at the end, when the estimates are shown to be incorrect. The risk was in asking for the estimates in the first place, and placing trust in them. Don&#8217;t do it. Don&#8217;t promise things that you can&#8217;t be sure of.</p>
<p>Embrace this reality. Embrace this uncertainty. Always focus on what&#8217;s most important. That&#8217;s how you make customers happy.</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.boochtek.com/2014/03/23/agile-estimation/feed</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
	</channel>
</rss>
