<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Programming &#8211; BoochTek, LLC</title>
	<atom:link href="http://blog.boochtek.com/category/programming/feed" rel="self" type="application/rss+xml" />
	<link>http://blog.boochtek.com</link>
	<description>Web Development, Ruby on Rails, Open Source</description>
	<lastBuildDate>Thu, 07 Jul 2016 04:22:08 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.5.3</generator>
	<item>
		<title>2015 Year in Review</title>
		<link>http://blog.boochtek.com/2015/12/28/year-in-review-2015</link>
		<comments>http://blog.boochtek.com/2015/12/28/year-in-review-2015#respond</comments>
		<pubDate>Tue, 29 Dec 2015 05:28:38 +0000</pubDate>
		<dc:creator><![CDATA[Craig Buchek]]></dc:creator>
				<category><![CDATA[Blogging]]></category>
		<category><![CDATA[Brilliant]]></category>
		<category><![CDATA[Languages]]></category>
		<category><![CDATA[Resolutions]]></category>
		<category><![CDATA[Retrospectives]]></category>

		<guid isPermaLink="false">http://blog.boochtek.com/?p=287</guid>
		<description><![CDATA[It&#8217;s that time of year again — time for a retrospective on how I did on my goals for the year. I had 5 main goals for 2015: Job Hunting Conferences Blogging Programming Language Design Writing an Agile Book Job Hunting I got pretty lucky on this one. My main contract with Mercy got extended several times. Amos and &#8230; <a href="http://blog.boochtek.com/2015/12/28/year-in-review-2015" class="more-link">Continue reading<span class="screen-reader-text"> "2015 Year in Review"</span></a>]]></description>
				<content:encoded><![CDATA[<p>It&#8217;s that time of year again — time for a retrospective on how I did on <a href="http://blog.boochtek.com/2015/02/02/resolutions">my goals</a> for the year. I had 5 main goals for 2015:</p>
<ul>
<li>Job Hunting</li>
<li>Conferences</li>
<li>Blogging</li>
<li>Programming Language Design</li>
<li>Writing an Agile Book</li>
</ul>
<h2>Job Hunting</h2>
<p>I got pretty lucky on this one. My main contract with <a href="https://www.mercy.net/">Mercy</a> got extended several times. <a href="https://twitter.com/adkron">Amos</a> and I must have been doing a good job of keeping the customer happy. We even made it through a couple rounds of layoffs. I&#8217;m wrapping up the gig at Mercy now. I&#8217;m working one day a week there, as the project winds down.</p>
<p>I also started a new gig this month at <a href="https://www.ctl.io/">CenturyLink</a>. I&#8217;m working on a cloud development team. Our current project involves selling <a href="https://www.ctl.io/wordpress/">WordPress as a service</a>. The manager had been courting me for most of the year. I&#8217;m excited about my new role; I&#8217;ll be writing about it in a blog post soon.</p>
<h2>Conferences</h2>
<p>I set a goal in 2014 to give my first conference talk. I accomplished that, giving <a href="http://confreaks.tv/videos/rubyconf2014-ruby-idioms-you-re-not-using-yet">an ambitious talk</a> at <a href="http://confreaks.tv/events/rubyconf2014">RubyConf</a>. I enjoyed having done that, and vowed to do more conference speaking.</p>
<p>I gave 3 conference talks in 2015. I gave a <a href="https://www.youtube.com/watch?v=kmfUfjpDpz0">workshop</a> on <a href="https://rawgit.com/booch/presentations/master/HTTP_Exploration/slides.html#1">HTTP</a> at RailsConf. I <a href="http://tinyurl.com/madruby-ii">talked</a> about <a href="https://www.youtube.com/watch?v=F6MZi9OlW1Q">immutable infrastructure</a> at Madison+ Ruby. At RubyConf, I gave a talk <a href="https://www.youtube.com/watch?v=MZVSK4cjeF4">on a micro-ORM</a> <a href="https://github.com/boochtek/ruby_preserves">I wrote</a>. I also gave a <a href="https://rawgit.com/booch/presentations/master/No_Estimates/slides.html#1">lightning talk</a> about Agile estimation (#noestimates).</p>
<p>I was an alternate speaker at Windy City Rails, but did not give my talk on <a href="https://rawgit.com/booch/presentations/master/Alternatives_to_ActiveRecord/slides.html#1">Alternatives to ActiveRecord</a>. I also went to Strange Loop, mainly to see several friends and acquaintances speak.</p>
<h2>Blogging</h2>
<p>I wrote 24 blog articles this year. That&#8217;s about one every other week. What really kept me going was participating in a <a href="https://github.com/booch/pact#readme">writing pact</a>. When the pact was going, I had a 75% blogging rate. That&#8217;s pretty good.</p>
<p>I&#8217;m not so sure about the quality of my blog writing though. I know that practicing writing is supposed to make you better. I know I wrote some really good articles over the past year, but I think I also wrote some articles that weren&#8217;t very good. I think sometimes the deadline has caused more harm than good. I&#8217;m not really sure what to do about that; perhaps just pushing on is the right answer.</p>
<h2>Programming Language Design</h2>
<p>I&#8217;ve taken a lot of notes on the design of my programming language. Any time I learn something interesting about another language, or come up with another idea, I write it down.</p>
<p>But I haven&#8217;t worked on the implementation. (I last worked on the implementation in 2014.) I should be experimenting with some ideas, implementing them to see how they work out. I&#8217;ve even kicked around the idea of starting with a Forth variant, just to get something working quickly.</p>
<p>I haven&#8217;t written any articles on my ideas this year either. My notes are pretty extensive, and it would be good to write some articles to help get my thoughts straight.</p>
<h2>Writing an Agile Book</h2>
<p>I&#8217;ve got some things to say about Agile, and want to write a book to express those ideas. I&#8217;ve made a start — I&#8217;ve got the chapters outlines, and have started on a few chapters. But I haven&#8217;t made as much progress as I&#8217;d like to. I shared what I&#8217;ve got with Amos, and he showed some interest in pairing with me on the writing. Hopefully we&#8217;ll work on it together in 2016 and publish it.</p>
<h2>Other</h2>
<p>There were a few other accomplishments that weren&#8217;t explicitly on my list, but I&#8217;d like to call attention to.</p>
<p>I&#8217;ve continued participating on the <a href="http://www.thisagilelife.com/">This Agile Life</a> podcast. I was in 12 of the 33 episodes that were recorded in 2015. I hope to participate in more in 2016. We&#8217;re considering scheduling a standard recording night each week, which might help us record more regularly.</p>
<p>I recently took over as maintainer of <a href="https://github.com/solnic/virtus#readme">Virtus</a>, a library to declare attributes for Ruby model classes. I haven&#8217;t done a lot yet, since I&#8217;ve been busy with travel, vacation, and holidays. But I hope to catch up with all the pending pull requests and issues in the next month or so.</p>
<p>The accomplishment I&#8217;m most proud of is mentoring for the <a href="http://royclaysr.com/">Roy Clay Sr. Tech Impact</a> program. This is a program begun as a result of the Ferguson protest movement. We&#8217;re helping teach kids (from 14 to 25) web design and development. My personal goal was to give these kids an opportunity that they would not have otherwise had. But it turned out that some of them have actually started a business building web sites for small companies. I&#8217;m so proud of the progress they&#8217;ve made in such a short time; it&#8217;s a challenging program.</p>
<h2>Conclusion</h2>
<p>I&#8217;m pretty happy with my accomplishments this year. I made at least some progress on each of the goals I set. I&#8217;ve been thinking about my goals for next year; I&#8217;ll write that as a separate blog article next week.</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.boochtek.com/2015/12/28/year-in-review-2015/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>The Ultimate Optimization</title>
		<link>http://blog.boochtek.com/2015/12/06/ultimate-optimization</link>
		<comments>http://blog.boochtek.com/2015/12/06/ultimate-optimization#respond</comments>
		<pubDate>Mon, 07 Dec 2015 05:28:43 +0000</pubDate>
		<dc:creator><![CDATA[Craig Buchek]]></dc:creator>
				<category><![CDATA[Programming]]></category>

		<guid isPermaLink="false">http://blog.boochtek.com/?p=277</guid>
		<description><![CDATA[I got my first computer in 1984. It was a Commodore 64. I had to do extra chores and save up my allowance to buy it. I was 13. Back then, Sears and other retail stores had Commodore 64 computers out on display. Whenever I went to the store, I&#8217;d write a short BASIC program and leave it running on &#8230; <a href="http://blog.boochtek.com/2015/12/06/ultimate-optimization" class="more-link">Continue reading<span class="screen-reader-text"> "The Ultimate Optimization"</span></a>]]></description>
				<content:encoded><![CDATA[<p>I got my first computer in 1984. It was a Commodore 64. I had to do extra chores and save up my allowance to buy it. I was 13.</p>
<p>Back then, Sears and other retail stores had Commodore 64 computers out on display. Whenever I went to the store, I&#8217;d write a short BASIC program and leave it running on the display computers:</p>
<pre>10 PRINT "CRAIG IS GREAT!"
20 GOTO 10</pre>
<p><span style="font-weight: 300;">Hey, I was a 13-year-old kid. Later, I got a little more sophisticated. </span>I&#8217;d change the background color instead. I still remember the POKE address:</p>
<pre>10 FOR I=0 TO 255
20 POKE 53281, I
30 NEXT I
40 GOTO 10
RUN</pre>
<p><span style="font-weight: 300;">This was fast enough to change the background color every few scan lines, </span>creating a flashing scrolling effect.</p>
<p>Later, I learned 6502 assembly language. I translated the BASIC program into assembler, and memorized the bytes to type in at the store. In assembly language, the background color would change several times per scan line. The effect was kind of psychedelic.</p>
<p>All that happened in the mid-1980s.</p>
<p>Fast-forward to about 2000 or so. I was telling the above story after a St. Louis LUG meeting. I explained how I had memorized the 10 or 12 bytes of machine code, and would leave the program running with its psychedelic effect.</p>
<p>After thinking about it for a bit, I thought that 10 or 12 bytes seemed too much. It actually bothered me — I couldn&#8217;t fall asleep when I got home. I got up and found my old 6502 manuals. I figured out how to write the code in 7 bytes. I installed the Vice C64 emulator on my Linux desktop, and tested my code. It worked as expected. (The emulator was already clock-cycle perfect by then.) Here&#8217;s the assembly code:</p>
<pre>INX         ; $E8           ; 232
STX $D021   ; $8E $21 $D0   ; 142 33 208   ; $D021 = 53281
JMP $C000   ; $4C $00 $C0   ; 76 0 192     ; $C000 = 49152</pre>
<p>Here&#8217;s the BASIC program to store that program in memory and run it:</p>
<pre>10 FOR N=49152 TO 49152+6: READ Q : POKE N, Q : NEXT
20 DATA 232, 142, 33, 208, 76, 0, 192
30 SYS 49152
RUN</pre>
<p><span style="font-weight: 300; background-color: #ffffff;">The moral of the story is that you can optimize even a 10-byte program, 15 years after the last time it was used. So don&#8217;t tell me that your program can&#8217;t be improved, no matter how small it is.</span></p>
<p>PS. I rewrote the code above while writing this article in 2015, about 15 years after the last time I rewrote it. And I again downloaded Vice to test it, this time on Mac OS X.</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.boochtek.com/2015/12/06/ultimate-optimization/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Not Quite Callbacks</title>
		<link>http://blog.boochtek.com/2015/06/22/not-quite-callbacks</link>
		<comments>http://blog.boochtek.com/2015/06/22/not-quite-callbacks#respond</comments>
		<pubDate>Tue, 23 Jun 2015 04:55:17 +0000</pubDate>
		<dc:creator><![CDATA[Craig Buchek]]></dc:creator>
				<category><![CDATA[Architecture]]></category>
		<category><![CDATA[Ruby]]></category>
		<category><![CDATA[Ruby on Rails]]></category>

		<guid isPermaLink="false">http://blog.boochtek.com/?p=245</guid>
		<description><![CDATA[I&#8217;ve been working on application architectures based on Uncle Bob&#8217;s Ruby Midwest talk, following the hexagonal architectural pattern. I posted an article a couple months ago showing a way that works fairly well in Rails, and some accompanying Rails example code. But there was one thing I wasn&#8217;t quite happy with. The problem is that we used callbacks (actually, &#8230; <a href="http://blog.boochtek.com/2015/06/22/not-quite-callbacks" class="more-link">Continue reading<span class="screen-reader-text"> "Not Quite Callbacks"</span></a>]]></description>
				<content:encoded><![CDATA[<p>I&#8217;ve been working on application architectures based on <a href="http://confreaks.tv/videos/rubymidwest2011-keynote-architecture-the-lost-years">Uncle Bob&#8217;s Ruby Midwest talk</a>, following the <a href="http://alistair.cockburn.us/Hexagonal+architecture">hexagonal architectural pattern</a>. I posted <a href="http://blog.boochtek.com/2015/02/23/hexagonal-rails-controllers">an article a couple months ago showing a way that works fairly well in Rails</a>, and some <a href="https://github.com/boochtek/hexagonal-rails">accompanying Rails example code</a>. But there was one thing I wasn&#8217;t quite happy with.</p>
<p>The problem is that we used callbacks (actually, a publish/subscribe mechanism) in a situation where they don&#8217;t seem to quite fit:</p>
<pre>  def show
    interactor.on(:display) { |order| render order }
    interactor.on(:not_found) { |order_id| render status: 404 }
    interactor.get(params[:id])
  end</pre>
<p>What we really want is to respond in different ways, depending on the result of the call to <code>interactor.get()</code>. There&#8217;s no good reason to define the responses before the call. It makes a lot more sense to define the responses after the call, because they&#8217;ll <strong>happen</strong> after the call. I&#8217;d much prefer that the code be written in the order that it will be run.</p>
<p>I discussed this problem with my friend and colleague, <a href="http://dirtyinformation.com/">Amos King</a>. We came up with a better solution, which puts things back in the right order:</p>
<pre>  def show
    interactor.get(params[:id]) do |on|
      on.display { |order| render order }
      on.not_found { |order_id| render status: 404 }
    end
  end</pre>
<p>He even wrote a small library to do this, which he called <a href="https://github.com/BinaryNoggin/riposte">Riposte</a>. I&#8217;m not sure what to call this pattern, but it seems to work pretty well in this situation. I suppose that they&#8217;re still technically callbacks, because they&#8217;re passed in in the block that&#8217;s passed in to the call to <code>interactor.get()</code>. But due to the magic of Ruby blocks, we get to put them in the order they should be.</p>
<p>Riposte also gives you the option of using the response object directly, instead of passing a block:</p>
<pre>  def show
    on = interactor.get(params[:id])
    on.display { |order| render order }
    on.not_found { |order_id| render status: 404 }
  end</pre>
<p>This shows that it&#8217;s just returning an object, with the twist that the response object has methods that take blocks. The nested blocks variant is really the same thing, except that it&#8217;s yielding to the response object instead of returning it.</p>
<p>I&#8217;ve decide that is the pattern I&#8217;d like to use for interactions and their callers within Ruby hexagonal architecture.</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.boochtek.com/2015/06/22/not-quite-callbacks/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Architectural Thoughts</title>
		<link>http://blog.boochtek.com/2015/06/01/architectural-thoughts</link>
		<comments>http://blog.boochtek.com/2015/06/01/architectural-thoughts#respond</comments>
		<pubDate>Tue, 02 Jun 2015 04:51:59 +0000</pubDate>
		<dc:creator><![CDATA[Craig Buchek]]></dc:creator>
				<category><![CDATA[Architecture]]></category>
		<category><![CDATA[Programming]]></category>
		<category><![CDATA[Ruby]]></category>
		<category><![CDATA[Web Development]]></category>

		<guid isPermaLink="false">http://blog.boochtek.com/?p=240</guid>
		<description><![CDATA[I&#8217;ve started working on my own framework in Ruby in the past couple days. It&#8217;s built upon my recent work at understanding Uncle Bob&#8217;s Ruby Midwest 2011 talk, and his article on Clean Architecture, and the resulting hexagonal architecture (AKA ports and adapters). Somehow my research in that vein led me to Gary Bernhardt&#8217;s Boundaries talk. I&#8217;ve read &#8230; <a href="http://blog.boochtek.com/2015/06/01/architectural-thoughts" class="more-link">Continue reading<span class="screen-reader-text"> "Architectural Thoughts"</span></a>]]></description>
				<content:encoded><![CDATA[<p>I&#8217;ve started working on my own framework in Ruby in the past couple days. It&#8217;s built upon my recent work at understanding <a href="http://confreaks.tv/videos/rubymidwest2011-keynote-architecture-the-lost-years">Uncle Bob&#8217;s Ruby Midwest 2011 talk</a>, and his article on <a href="http://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html">Clean Architecture</a>, and the resulting hexagonal architecture (AKA ports and adapters).</p>
<p>Somehow my research in that vein led me to <a href="https://www.destroyallsoftware.com/talks/boundaries">Gary Bernhardt&#8217;s Boundaries talk</a>. I&#8217;ve read a lot about the talk, and knew about the idea of &#8220;functional core / imperative shell&#8221;. And I&#8217;ve worked with a lot of similar ideas lately. But I believe this is the first time that I actually watched the whole video.</p>
<p>Even after having read a lot about similar ideas, it was pretty mind-expanding. Gary&#8217;s really good at presenting these kinds of ideas in a simple way.</p>
<p>OOP as usually taught includes encapsulation of data together with behavior, with mutable objects. Functional programming separates data and behavior, with mostly immutable data. From experience, encapsulating data and behavior together seems helpful. But experience also shows that immutability is useful. So it would be good to have both of those together. This is something I&#8217;ve been thinking for a few years &#8212; how best do we get both?</p>
<p>Gary calls the combination &#8220;FauxO&#8221;. Logic and data are still combined, but there&#8217;s no mutation. Anywhere OOP would normally have mutation would just generate a new object. There&#8217;s no language restriction involved in enforcing immutability &#8212; just discipline.</p>
<p>But without mutability, it&#8217;s hard to do IO and maintain state. So Gary&#8217;s solution is to encapsulate as much as possible into an immutable (functional or FauxO) core, and around that, use an imperative (traditional OOP) shell. The functional core contains the bulk of the logic, and the imperative shell is a glue layer that handles the real world, including disk, network, and other I/O.</p>
<p>The result of this is that the shell has fewer paths, but more dependencies. The core contains no dependencies, but encapsulates the different logic paths. So we&#8217;re encapsulating dependencies on one side, and business logic on the other side. Or put another way, the way to figure out the separation is by doing as much as you can without mutation, and then encapsulating the mutation separately.</p>
<p>I love how this naturally breaks things up, so that the core is all testable with unit tests, and the imperative shell is tested with integration tests. And since the shell has few or no logic paths, you get the <a href="http://www.shawnewallace.com/blog/Dealing-With-A-Large-Test-Suite/">testing pyramid</a>, with more unit tests and fewer integration tests. The whole thing ends up being quite beautiful. Tests end up being very fast without any extra effort &#8212; not even stubbing or mocking. This tells us that things have been decomposed very well &#8212; an elegant design.</p>
<p>Gary makes the case that immutable objects can be treated as values, and passed across boundaries. Even process boundaries. This is something I&#8217;ve noticed as I&#8217;ve been working on my own Uncle Bob style hexagonal framework, but nobody in that camp ever mentioned that &#8212; they prefer DTOs or something more like hashes. I&#8217;m completely against hashes, because of the &#8220;stringly-typed&#8221; problem. And I don&#8217;t see much advantage in a DTO if I&#8217;ve got an immutable object; I&#8217;d be basically copying the object to an almost identical object. And I&#8217;d be losing any laziness possible for derived values within the original immutable object.</p>
<p>It&#8217;s striking to me how Gary&#8217;s image of an imperative shell around a functional core, plus Net, Disk, and State outside of the shell mirror&#8217;s Uncle Bob&#8217;s concentric circles. Uncle Bob has entities in the middle, surrounded by use cases, surrounded by Web, DB, and UI.</p>
<p>Another advantage that Gary shows is that breaking things up this way allows easy concurrency. In his example, he shows using the actor model &#8212; either just using threads and queues, or an actor library (or language feature).</p>
<p>After several years of thinking about the architectural issues seen in most large Rails apps, I&#8217;m starting to come to an understanding of how to combine all these ideas and come up with an architecture that will work better.</p>
<p>&nbsp;</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.boochtek.com/2015/06/01/architectural-thoughts/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Hexagonal Rails Controllers</title>
		<link>http://blog.boochtek.com/2015/02/23/hexagonal-rails-controllers</link>
		<comments>http://blog.boochtek.com/2015/02/23/hexagonal-rails-controllers#respond</comments>
		<pubDate>Tue, 24 Feb 2015 05:50:28 +0000</pubDate>
		<dc:creator><![CDATA[Craig Buchek]]></dc:creator>
				<category><![CDATA[OOP]]></category>
		<category><![CDATA[Ruby]]></category>
		<category><![CDATA[Ruby on Rails]]></category>

		<guid isPermaLink="false">http://blog.boochtek.com/?p=202</guid>
		<description><![CDATA[I&#8217;ve had a long love-hate relationship with Rails. I love the MVC framework and how it&#8217;s improved our speed of writing web apps. But I&#8217;ve never really been completely happy with it. I don&#8217;t generally agree with most of its opinions. I prefer models that follow the Data Mapper pattern, not the Active Record pattern. This includes separating the persistence &#8230; <a href="http://blog.boochtek.com/2015/02/23/hexagonal-rails-controllers" class="more-link">Continue reading<span class="screen-reader-text"> "Hexagonal Rails Controllers"</span></a>]]></description>
				<content:encoded><![CDATA[<p>I&#8217;ve had a long love-hate relationship with Rails. I love the MVC framework and how it&#8217;s improved our speed of writing web apps. But I&#8217;ve never really been completely happy with it. I don&#8217;t generally agree with most of its opinions. I prefer models that follow the Data Mapper pattern, not the Active Record pattern. This includes separating the persistence layer from the models&#8217; business logic. I prefer Slim or HAML to ERB. I prefer RSpec to Test::Unit or MiniTest. When Merb hit the scene, I was ready to make the jump, until Merb merged with Rails.</p>
<p>So inspired by <a href="https://blog.engineyard.com/2015/life-beyond-rails-brief-look-alternate-web-frameworks-ruby">PJ Hagerty&#8217;s recent article on alternative Ruby web frameworks</a>, I started thinking about how I&#8217;d write a replacement for Rails. I&#8217;d definitely keep the basic MVC framework. But I&#8217;d also want to implement a more <a href="http://alistair.cockburn.us/Hexagonal+architecture">hexagonal architecture</a>.</p>
<p>I started sketching out what this would look like, but I ended up starting with a Rails controller and finding the simplest way to make it hexagonal. I really don&#8217;t like callbacks, because they make tracing program execution difficult. But I didn&#8217;t see any other alternative. I found a simple pub/sub Ruby library called Wisper. It literally has only <code>publish</code>, <code>subscribe</code>, and <code>on</code> methods. (You use <code>on</code> to register single callbacks via blocks, and <code>subscribe</code> to register an object with method names corresponding to the callback names.)</p>
<p>The trick was figuring out how to break the controller into 2 pieces. What finally helped me was to find the single responsibilities of the 2 pieces. The Rails controller would remain in charge of managing the web interface, but would delegate to the other piece to handle any application-specific business logic. I decided to re-watch <a href="http://confreaks.tv/videos/rubymidwest2011-keynote-architecture-the-lost-years">Uncle Bob Martin&#8217;s &#8220;Architecture The Lost Years&#8221; talk</a>, which was the first time I was introduced to the ideas of Hexagonal Architecture. (He doesn&#8217;t name the architecture in the talk, but later calls it Clean Architecture.) He does a decent job of explaining how to break these 2 pieces apart. He used the term &#8220;interactor&#8221; in that talk, so I decided to go with that. He said that Jacobsen calls it a Control Object in <a href="http://www.amazon.com/Object-Oriented-Software-Engineering-Approach/dp/0201544350">Object Oriented Software Engineering</a>, but that&#8217;s too close to Rails&#8217;s &#8220;controller&#8221;.</p>
<p>So here&#8217;s an example of what I ended up with:</p>
<pre>class OrderController &lt; ApplicationController
  def index
    interactor.on(:display) { |orders| render orders }
    interactor.list
  end

  def show
    interactor.on(:display) { |order| render order }
    interactor.on(:not_found) { |order_id| render status: 404 }
    interactor.get(params[:id])
  end

private

  def interactor
    @interactor ||= OrderInteractor.new
  end
end</pre>
<pre>require "wisper"
require "order"

class OrderInteractor
  include Wisper.publisher

  def list
    orders = Order.all
    publish(:display, orders)
  end

  def get(id)
    order = Order.find(id)
    publish(:display, order)
  rescue ActiveRecord::RecordNotFound
    publish(:not_found, id)
  end
end</pre>
<p>I do have a few problems with this solution though. I&#8217;m not a fan of the name &#8220;interactor&#8221; for the business logic. I thought about calling it <code>OrderOperator</code>, or maybe <code>OrderOperations</code>, because it&#8217;s really a collection of operations. Perhaps it would be better to separate each operation into a separate class. <a href="https://github.com/apotonick/trailblazer">Trailblazer</a> does it that way. And for more complicated business logic, I would do that too, using the Method Object pattern. But like a Rails controller, there&#8217;s a lot in common among all the operations. I feel like a separate class for each operation for each would create too many coupled classes.</p>
<p>I&#8217;m also uncomfortable with the fact that the controller is delegating almost everything to the interactor. I guess this is OK, but it feels like there&#8217;s too little left when every line starts with <code>interactor</code>. I suppose extracting things some more would help mitigate this concern I&#8217;ll likely write a small gem to perform that extraction. I expect that that will allow a typical controller to be written in only a few lines. And maybe the same for the interactor side.</p>
<p>With the business logic extracted out of the controller, it was really easy for me to write a command-line version of the app. As Uncle Bob says, &#8220;the web is not particularly important to your application.&#8221;</p>
<p>I&#8217;ve put the code for this example on GitHub: <a href="https://github.com/boochtek/hexagonal-rails">https://github.com/boochtek/hexagonal-rails</a>. I&#8217;ll likely experiment with it some more over the next few weeks and months.</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.boochtek.com/2015/02/23/hexagonal-rails-controllers/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Resolutions</title>
		<link>http://blog.boochtek.com/2015/02/02/resolutions</link>
		<comments>http://blog.boochtek.com/2015/02/02/resolutions#respond</comments>
		<pubDate>Tue, 03 Feb 2015 05:42:13 +0000</pubDate>
		<dc:creator><![CDATA[Craig Buchek]]></dc:creator>
				<category><![CDATA[Agile]]></category>
		<category><![CDATA[Blogging]]></category>
		<category><![CDATA[Brilliant]]></category>
		<category><![CDATA[Resolutions]]></category>
		<category><![CDATA[Security]]></category>

		<guid isPermaLink="false">http://blog.boochtek.com/?p=198</guid>
		<description><![CDATA[January kept me pretty busy, so I&#8217;m a little late to this. But better late than never. And as an Agile practitioner, I don&#8217;t think personal retrospectives should be limited to one time of year. Review of 2014 Last year I wrote a blog entry listing my goals for 2014. As far as New Year&#8217;s resolutions go, I &#8230; <a href="http://blog.boochtek.com/2015/02/02/resolutions" class="more-link">Continue reading<span class="screen-reader-text"> "Resolutions"</span></a>]]></description>
				<content:encoded><![CDATA[<p>January kept me pretty busy, so I&#8217;m a little late to this. But better late than never. And as an Agile practitioner, I don&#8217;t think personal retrospectives should be limited to one time of year.</p>
<h1>Review of 2014</h1>
<p>Last year I wrote a blog entry listing <a href="http://blog.boochtek.com/2014/01/04/open-source-resolutions">my goals for 2014</a>. As far as New Year&#8217;s resolutions go, I was relatively successful &#8212; about 50% of my goals accomplished. Unfortunately, my Open Source contributions weren&#8217;t as strong as I had hoped; while I released some of my own work, I didn&#8217;t do much else. I did increase my blogging; getting in on a weekly blogging pact helped immensely. I also increased my participation on the <a href="http://thisagilelife.com/">This Agile Life podcast</a> to a level that I&#8217;m happy with. But the accomplishment I&#8217;m most proud of was giving a <a href="https://www.youtube.com/watch?v=hc_wtllfKtQ">presentation at RubyConf</a>.</p>
<h1>Plans for 2015</h1>
<p>I&#8217;d like to keep things rolling from last year, but crank up a few things. My plans are quite ambitious, so I don&#8217;t expect to get everything done by any means. But I think by setting the bar high, I&#8217;ll end up with a lot I can be proud of.</p>
<h2>Job Hunting</h2>
<p>Late last year, I took the jump into independent consulting. So far, I&#8217;ve really enjoyed it, and I&#8217;m booked up through April. My wife graduates in May, so we&#8217;ve got the possibility of moving if that makes sense. So I&#8217;ll be looking for consulting projects in town, but I&#8217;ll also be looking at jobs in San Francisco and Chicago. The possibilities are exciting, and I&#8217;ll be taking my time to find something just right.</p>
<h2>Conferences</h2>
<p>I was incredibly nervous leading up to my RubyConf presentation. Part of that was just the common fear of public speaking. For me, that only kicks in at around 100 people, and this audience was around 250. I think another reason was that I chose a really ambitious topic, and I kept finding more that I wanted to talk about, but wasn&#8217;t prepared for. But I think I did a pretty good job presenting an advanced topic. And I was so pumped by the sense of accomplishment as soon as I finished. So I&#8217;m hoping to do it more. I&#8217;ve already submitted a couple proposals, and plan to submit several more.</p>
<h2>Blogging</h2>
<p>I believe that blogging is important for me to get my thoughts down &#8212; for myself and to share with others. I was really successful last year when I had a partner to keep me honest, via a pact. So I&#8217;ve started up <a href="https://github.com/booch/pact">another pact</a> this year, which will hopefully ensure I&#8217;ll keep things going. I&#8217;ve got a really long backlog of topics, so as long as I keep at it, I&#8217;ll have plenty to write about.</p>
<p>I also want to move away from WordPress to a static system &#8212; probably <a href="https://middlemanapp.com/">Middleman</a>. I&#8217;ve got 2 major problems with WordPress. First, I no longer trust its security, nor the security of any application written in PHP. Second, it generates HTML every time someone requests a page, instead of when the content is updated. I find that to be a waste of resources, and problematic from a security standpoint. The main problem with moving to a static blogging system is that I really want to allow comments, pingbacks, and tweetbacks. So I&#8217;ll have to find a way to integrate those.</p>
<h2>Programming Language Design</h2>
<p>Last year I started thinking about programming language design, and started implementing a language tentatively called <a href="http://blog.boochtek.com/2014/03/30/brilliant-my-own-programming-language">Brilliant</a>. I&#8217;ve done a lot more thinking on the topic, and have a lot of notes. But I haven&#8217;t implemented much more yet. This year, I&#8217;d like to get my thoughts more organized, and write a series of blog posts on various aspects of language design. The most interesting part seems to be the trade-offs involved in the ways that various language features interact. So I&#8217;d like to make some progress on the language implementation, but more importantly, I&#8217;d like to get a lot of my design ideas written down.</p>
<p>I&#8217;m also going to spend a lot of time learning a bunch more programming languages, so I have a better understanding of possible features, combinations of features, and their interactions. I&#8217;ve already start with Elixir, Clojure, and Racket. I&#8217;m hoping to also look at OCaml, Factor, and Haskell. I&#8217;ll probably also take a look at the 2 &#8220;Seven Languages in Seven Weeks&#8221; books.</p>
<h2>Agile Book</h2>
<p>I think people often have trouble getting started with Agile. I started on a book last year, and got down quite a lot of good ideas. But I realized that I&#8217;m going to have a hard time organizing all those ideas into something coherent. Still, I&#8217;d like to try to get something out there that lets people get started with Agile. My idea is to present a toolbox of practices to get started with and build on that foundation over time with additional practices. Sort of a playbook on how to get started over the first 6 to 12 months and be successful. I want to make some progress on the book, at least enough to decide whether it&#8217;s worth the effort to finish it and self-publish it.</p>
<p>&nbsp;</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.boochtek.com/2015/02/02/resolutions/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Ruby Pattern: Parameterized Module Inclusion</title>
		<link>http://blog.boochtek.com/2014/04/14/ruby-parameterized-module-inclusion</link>
		<comments>http://blog.boochtek.com/2014/04/14/ruby-parameterized-module-inclusion#comments</comments>
		<pubDate>Tue, 15 Apr 2014 04:57:29 +0000</pubDate>
		<dc:creator><![CDATA[Craig Buchek]]></dc:creator>
				<category><![CDATA[Ruby]]></category>

		<guid isPermaLink="false">http://blog.boochtek.com/?p=184</guid>
		<description><![CDATA[I&#8217;ve run across a pattern in Ruby lately that I really like. It solves some problems that I&#8217;ve struggled with for several years. Let me start with the problems. Let&#8217;s say you want to include an ORM in a model class, and want to tell it what database table to use. Typically, you&#8217;d do this: class User include &#8230; <a href="http://blog.boochtek.com/2014/04/14/ruby-parameterized-module-inclusion" class="more-link">Continue reading<span class="screen-reader-text"> "Ruby Pattern: Parameterized Module Inclusion"</span></a>]]></description>
				<content:encoded><![CDATA[<p>I&#8217;ve run across a pattern in Ruby lately that I really like. It solves some problems that I&#8217;ve struggled with for several years. Let me start with the problems.</p>
<p>Let&#8217;s say you want to include an ORM in a model class, and want to tell it what database table to use. Typically, you&#8217;d do this:</p>
<pre>class User
  include MyORM::Model
  table 'people'
end</pre>
<p>But that <code>table</code> call is more like an option to the module inclusion than anything else. So what we&#8217;d really like is something like this:</p>
<pre>class User
  include MyORM::Model, table: 'people'
end</pre>
<p>But that&#8217;s not valid Ruby; <code>include</code> doesn&#8217;t let you pass anything other than a module.</p>
<p>So when I was learning about <a href="https://github.com/solnic/virtus">Virtus</a>, I noticed that its example of how to include it is a bit different than the standard Ruby idiomatic <code>include</code>:</p>
<pre>class User
  include Virtus.model
end</pre>
<p>At first glance, it reads like the first example. But on closer inspection and consideration, it&#8217;s quite a bit different. Where <code>MyORM::Model</code> is a constant that refers to a module, <code>Virtus.model</code> is a method call. So there&#8217;s a method named <code>model</code> in the <code>Virtus</code> module. That method returns another module &#8212; which is exactly what&#8217;s needed in order to include it into our model class.</p>
<p>The easiest way to implement <code style="font-style: inherit;">Virtus.model</code> would be this:</p>
<pre>module Virtus
  def model
    ::Virtus::Model
  end
end

module Virtus::Model
  # ...
end</pre>
<p>If <code>Virtus.model</code> doesn&#8217;t need to take any arguments, that&#8217;s perfectly fine. In fact, I&#8217;ve started to use this implementation of the pattern for modules that don&#8217;t need parameters.</p>
<p>Because <code>Virtus.model</code> is a method, we can also call it with options:</p>
<pre>class User
  include Virtus.model(constructor: false, mass_assignment: false)
end</pre>
<p>We could even pass a block. But how do we process those options? There are a few different ways. However we do it, we have to be sure to return a module. And we can create modules in a few different ways.</p>
<p>Virtus uses the builder pattern. It takes the parameters passed in and builds a module dynamically. By that, I mean that it calls <code>Module.new</code> and then adds methods to that module. It does this by mixing in other modules, but it could do it by dynamically defining methods as well.</p>
<p>I&#8217;ve never seen this pattern in any other language. It&#8217;s obviously only possible because we can dynamically create modules.</p>
<p>The use of this idiom seems to be catching on a bit in the Ruby community. I&#8217;ve started using it myself, and will be adding it to my <a href="https://github.com/boochtek/includable-activerecord">Includable::ActiveRecord</a> gem soon.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.boochtek.com/2014/04/14/ruby-parameterized-module-inclusion/feed</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Brilliant &#8211; My Very Own Programming Language</title>
		<link>http://blog.boochtek.com/2014/03/30/brilliant-my-own-programming-language</link>
		<comments>http://blog.boochtek.com/2014/03/30/brilliant-my-own-programming-language#comments</comments>
		<pubDate>Mon, 31 Mar 2014 04:25:38 +0000</pubDate>
		<dc:creator><![CDATA[Craig Buchek]]></dc:creator>
				<category><![CDATA[Brilliant]]></category>
		<category><![CDATA[Languages]]></category>

		<guid isPermaLink="false">http://blog.boochtek.com/?p=172</guid>
		<description><![CDATA[I&#8217;ve decided to design and implement my own programming language, and call it Brilliant. I&#8217;ve been interested in programming languages and linguistics almost as long as I&#8217;ve been using computers. I&#8217;ve long thought that if I ever go back to college, it&#8217;s likely that I&#8217;ll concentrate on programming languages as a specialty. My recent discovery and &#8230; <a href="http://blog.boochtek.com/2014/03/30/brilliant-my-own-programming-language" class="more-link">Continue reading<span class="screen-reader-text"> "Brilliant &#8211; My Very Own Programming Language"</span></a>]]></description>
				<content:encoded><![CDATA[<p>I&#8217;ve decided to design and implement my own programming language, and call it <a href="https://github.com/BoochTek/brilliant">Brilliant</a>.</p>
<p>I&#8217;ve been interested in programming languages and linguistics almost as long as I&#8217;ve been using computers. I&#8217;ve long thought that if I ever go back to college, it&#8217;s likely that I&#8217;ll concentrate on programming languages as a specialty.</p>
<p>My recent discovery and involvement with the <a href="http://crystal-lang.org/">Crystal</a> programming language has gotten me excited about new language ideas. It&#8217;s also helped me realize that implementing a language myself is feasible, and that there&#8217;s no better time to start than now.</p>
<h1>Implementation</h1>
<p>For now, the Brilliant implementation doesn&#8217;t let you do much more than &#8220;Hello World&#8221;. But you gotta start somewhere. So this article isn&#8217;t really &#8220;Introducing Brilliant&#8221; so much as the start of a series of articles on its design and implementation.</p>
<p>I wanted to use a PEG (parsing expression grammar) parser for several reasons. For one, they seem to have gained a lot of popularity in the past few years. Also, PEGs cannot be ambiguous, which can solve a few difficult problems, such as the &#8220;dangling <code>else</code>&#8220;. Perhaps my favorite feature of PEG grammars is that you don&#8217;t need a separate tokenizer (lexer). This provides a nice advantage in that we can use keywords like &#8220;<code>class</code>&#8221; as variables, as long as they&#8217;re not used in a place where the keyword would make sense.</p>
<p>So knowing that I wanted to use a PEG, I had to find a PEG parser. I kind of wanted to use <a href="http://www.antlr.org/">ANTLR</a>, which has been a leading parser for many years. But the PEG seems to be new to version 4, and I couldn&#8217;t find any Ruby bindings for version 4. <a href="http://treetop.rubyforge.org/">Treetop</a> seems to be the most popular parser for Ruby, but I found the EBNF format that <a href="https://github.com/jarhart/rattler">Rattler</a> uses to be more to my taste. I think the fact that it&#8217;s newer also gives it a few advantages, having had a chance to learn some lessons from Treetop.</p>
<p>I thought about using the Rubinius VM, but decided to go with <a href="http://llvm.org/">LLVM</a>, mainly since it has slightly better docs for Ruby, and because it&#8217;s what Crystal uses. Also, it&#8217;s pretty easy to get it to compile to a binary executable or run in a JIT. In the future, I might consider switching to the Rubinius VM, the Erlang VM, or the Perl 6 VM (<a href="http://www.parrot.org/">Parrot</a>). But for now, I like the idea of being able to compile to a binary and easily interface with C, just like Crystal.</p>
<h1>Goals</h1>
<p>My main goal is to have fun playing around with language ideas.</p>
<p>I&#8217;ve found a really great language in Ruby, so I&#8217;ll be using it as a starting point. But Ruby does have its faults. In some ways, I want to answer the question &#8220;what would Ruby look like if we designed it today?&#8221;.</p>
<p>But I also want to explore other ideas. What if objects defaulted to immutable? What if functions and methods were assumed to be pure by default? Might it be possible to infer the purity of a function or method? (If so, we could automatically memoize them.) Can we make creating an actor as easy as creating an object?</p>
<p>I&#8217;ll also be looking at ideas from other programming languages. Could we get some of the benefits of Haskell&#8217;s purity without having to do somersaults to do IO? Could we mix Python&#8217;s indentation style scoping with brace style or <code>begin</code>/<code>end</code> style? Could we integrate Icon&#8217;s ideas about success and failure (goal-directed execution)? What interesting features can we pull from Ada, Io, CoffeeScript, Crystal, Rubinius, Perl 6, etc.?<i><br />
</i></p>
<p>I&#8217;m not so much as interested in cutting-edge features, as in features that can be easily used by the average programmer. More importantly, I&#8217;m interested in how features interact with each other, so they fit well together to create a whole that&#8217;s greater than the sum of the parts.</p>
<h1>Naming</h1>
<p>I wanted to name my programming language &#8220;Fermat&#8221;. I&#8217;ve long been intrigued by <a href="http://en.wikipedia.org/wiki/Fermat's_Last_Theorem">Fermat&#8217;s Last Theorem</a>, and <a href="http://en.wikipedia.org/wiki/Fermat%27s_little_theorem">Fermat&#8217;s Little Theorem</a> is important in number theory. Unfortunately, there&#8217;s already a computer algebra system with that name.</p>
<p>So I decided to find a name in the same vein as &#8220;Ruby&#8221; and &#8220;Crystal&#8221;. I looked at the Wikipedia page for &#8220;gemstones&#8221; for some inspiration. A lot of the names of gemstones are already taken. I considered some obscure gemstones, but saw the word &#8220;brilliant&#8221; and thought it was decent. It&#8217;s not the name of another gemstone, but still evokes some similarity to Ruby and Crystal.</p>
<p>So that&#8217;s the name for now. Perhaps I&#8217;ll decide to change it at some point in the future, but I needed a name for the project, as well as a file extension for source code files. I chose &#8220;<code>bril</code>&#8221; for that. I suppose &#8220;<code>br</code>&#8221; would be a better choice. Perhaps I&#8217;ll change that before the next article in this series.</p>
<h1>Future</h1>
<p>I hope to work on Brilliant every once in a while. I expect it&#8217;ll take a couple years before it&#8217;s really very useful.</p>
<p>When I do add a major feature, I&#8217;ll be certain to blog about it. I&#8217;ve got tons of ideas strewn about in various files. It would be great to get them organized and published —and even better to get them implemented.</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.boochtek.com/2014/03/30/brilliant-my-own-programming-language/feed</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Slow Down!</title>
		<link>http://blog.boochtek.com/2014/03/16/slow-down</link>
		<comments>http://blog.boochtek.com/2014/03/16/slow-down#respond</comments>
		<pubDate>Mon, 17 Mar 2014 04:14:45 +0000</pubDate>
		<dc:creator><![CDATA[Craig Buchek]]></dc:creator>
				<category><![CDATA[Agile]]></category>
		<category><![CDATA[Programming]]></category>

		<guid isPermaLink="false">http://blog.boochtek.com/?p=154</guid>
		<description><![CDATA[There&#8217;s a tweet that I saw recently, with some simple advice for novice programmers: Slow down. This is probably good advice for most programmers. Our team recently noticed that every time we try to rush things, we make mistakes. And the mistakes end up costing us more time than if we had just done things at &#8230; <a href="http://blog.boochtek.com/2014/03/16/slow-down" class="more-link">Continue reading<span class="screen-reader-text"> "Slow Down!"</span></a>]]></description>
				<content:encoded><![CDATA[<p>There&#8217;s a tweet that I saw recently, with some simple advice for novice programmers:</p>
<blockquote><p>Slow down.</p></blockquote>
<p>This is probably good advice for most programmers. Our team recently noticed that every time we try to rush things, we make mistakes. And the mistakes end up costing us more time than if we had just done things at our normal pace. Slowing down ensures that you do things right, and when you do things right, you end up with a higher-quality product.</p>
<h1>Speed and Code Quality</h1>
<p>There are 2 types of code quality: internal and external. External code quality can be measured by how many bugs have been reported by customers. Internal code quality is harder to measure, but it mainly deals with the ability to change the code. When your internal quality is low, you&#8217;ve got lots of technical debt, and it&#8217;s harder to make changes.</p>
<p>So when you try to write code quickly, code quality decreases, leading to a code base that takes more time to make changes to. Conversely, when you slow down, your code quality improves, and it becomes easier to make changes more quickly. So when writing code, slowing down in the short run leads to a speed-up in the long run.</p>
<h1>Speed and Process Improvement</h1>
<p>But writing code isn&#8217;t the only place where we try to speed up. On an Agile team, we&#8217;re always trying to improve the way we work — especially at the beginning stages of an Agile transformation. So we&#8217;re eager to make changes in our processes. But I&#8217;d urge you to slow down here as well.</p>
<p>My colleague <a href="http://dirtyinformation.com/">Amos</a> and I frequently argue over pair switching. It&#8217;s funny, because we agree on everything except for 1 small detail. We both think pair switching is very important, to ensure that team members see more of what&#8217;s going on, to bring more ideas to each story, to prevent knowledge silos, and to encourage team ownership. Where we disagree is how long an ideal pairing session should last. I think pairs should switch every 2 hours, and he thinks 1 hour is ideal. I&#8217;ve seen teams reach the 1 hour pairing sessions successfully. But usually not without some pain and even often failing at the first attempt.</p>
<p>There&#8217;s nothing inherently wrong with failing. But if you fail at something, you&#8217;re not likely to try again. After all, you should learn from your failures, right?</p>
<p>So if you want your team to do something, you probably don&#8217;t want them to fail at it. If they fail, they won&#8217;t want to try a second time. That&#8217;s just human nature, and learning from failure. While you might think that they failed because they weren&#8217;t ready for the change yet, they&#8217;ll most likely think that they failed because this particular change won&#8217;t work for their situation. And they probably won&#8217;t know what to change when trying again, so they won&#8217;t try again.</p>
<p>I&#8217;ve seen this over and over. Back when Linux was up-and-coming, when a consultant pushed a company into using Linux before they were ready for it, and it didn&#8217;t work out, that company was cautious about trying again. So instead of being on the leading edge of using Linux, or even the middle of the pack, they ended up more toward the trailing edge. Had they not been pushed, they would have gotten more benefit in the long run.</p>
<p>So my advice in process improvement is the same as in programming: slow down. Take small steps toward what you think is the ideal. Make a small change, see how it works out, and adjust. As long as you&#8217;re still moving in the right direction, I believe you&#8217;ll move faster by taking small steps than by trying to make big leaps.</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.boochtek.com/2014/03/16/slow-down/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Burying the Lede</title>
		<link>http://blog.boochtek.com/2014/03/11/readable-shell-scripts</link>
		<comments>http://blog.boochtek.com/2014/03/11/readable-shell-scripts#respond</comments>
		<pubDate>Wed, 12 Mar 2014 04:28:22 +0000</pubDate>
		<dc:creator><![CDATA[Craig Buchek]]></dc:creator>
				<category><![CDATA[GNU/Linux]]></category>
		<category><![CDATA[Shell]]></category>
		<category><![CDATA[System Admin]]></category>

		<guid isPermaLink="false">http://blog.boochtek.com/?p=110</guid>
		<description><![CDATA[Most of us don&#8217;t write very readable shell scripts. There are plenty of things we could do better, but today I want to talk about one in particular — burying the lede. The term &#8220;burying the lede&#8221; comes from the field of journalism. Here&#8217;s the Wiktionary definition: To begin a story with details of secondary importance to the reader &#8230; <a href="http://blog.boochtek.com/2014/03/11/readable-shell-scripts" class="more-link">Continue reading<span class="screen-reader-text"> "Burying the Lede"</span></a>]]></description>
				<content:encoded><![CDATA[<p>Most of us don&#8217;t write very readable shell scripts. There are plenty of things we could do better, but today I want to talk about one in particular — burying the lede.</p>
<p>The term &#8220;burying the lede&#8221; comes from the field of journalism. Here&#8217;s the <a href="http://en.wiktionary.org/wiki/bury_the_lede">Wiktionary definition</a>:</p>
<blockquote><p>To begin a story with details of secondary importance to the reader while postponing more essential points or facts.</p></blockquote>
<p>Like a good news article, code should tell a story. And the story should start with what&#8217;s most important. In the case of code, the most important information is the high-level functionality — a succinct summary of what the program does. In other words, write (and organize) the code top-down, as opposed to bottom-up.</p>
<p>Unfortunately, shell script doesn&#8217;t make this easy. Due to the way shell scripts are interpreted, you can&#8217;t call a function until after you&#8217;ve defined it. This leads to most of us structuring our code like this:</p>
<pre>function do_something { ... }
function do_something_else { ... }

do_something
do_something_else</pre>
<p>The problem with this is that the function definitions will likely take quite a few lines, and we won&#8217;t see what the top-level functionality is until we reach the end of the script.</p>
<p>I&#8217;d like to propose a standard way to structure shell scripts to mitigate this issue. (I&#8217;m really only talking about shell scripts that have function definitions within them.) I&#8217;m sure I&#8217;ve seen a few scripts do this, but it&#8217;s not very common at all.</p>
<p>My proposal is simple:</p>
<pre>function main {
  do_something
  do_something_else
}
function do_something { ... }
function do_something_else { ... }

main</pre>
<p>This structure lets us start with the lede. We describe the top-level functionality right away. Only then do we get to the secondary details. The name <code>main</code> makes it pretty clear that it contains the top-level functionality.</p>
<p>I&#8217;ve recently started writing my shell code like this, and I&#8217;m happy with the results. I&#8217;ve also started to use some other programming techniques in my shell scripts to improve readability: better naming, extracting more methods, and moving helper methods into separate files. It feels good to treat shell scripts like real code instead of just some stuff I&#8217;ve hacked together.</p>
<p>PS. The WordPress theme I&#8217;m currently using (Twenty Eleven) also buries the lede — I can barely even see the title of the blog post on my screen without scrolling. I&#8217;m going to have to change that soon.</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.boochtek.com/2014/03/11/readable-shell-scripts/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>
